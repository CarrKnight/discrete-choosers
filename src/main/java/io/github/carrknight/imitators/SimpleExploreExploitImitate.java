package io.github.carrknight.imitators;

import com.sun.javafx.UnmodifiableArrayList;
import io.github.carrknight.bandits.SimpleEpsilonGreedyBandit;
import io.github.carrknight.utils.UtilityFunction;
import io.github.carrknight.utils.rules.ObservationPredicate;
import io.github.carrknight.utils.rules.StochasticObservationPredicate;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import java.util.SplittableRandom;

/**
 * a facade for explore exploit imitate agents that deal with states that are indicized and whose experiment's result is already
 * the reward
 */
public class SimpleExploreExploitImitate extends ExploreExploitImitate<Integer,Double,Object> {


    /**
     * fixed probabilities to explore, and when it does it explores totally at random
     * @param numberOfOptions number of options we can choose
     * @param explorationProbability probability to explore
     * @param imitationProbability probability to imitate
     * @param randomseed seed for a SplittableRandom
     */
    public SimpleExploreExploitImitate(
            int numberOfOptions,
            double explorationProbability,
            double imitationProbability,
            long randomseed) {
        super((optionTaken, experimentResult, contextObject) -> experimentResult,
              SimpleEpsilonGreedyBandit.buildOptionsArray(numberOfOptions),
              new StochasticObservationPredicate<>(explorationProbability),
              new StochasticObservationPredicate<>(imitationProbability),
              new SplittableRandom(randomseed),
              new ExploreAtRandom<>());
    }
}
