package io.github.carrknight.imitators;

import io.github.carrknight.Chooser;
import io.github.carrknight.utils.SimpleObservation;
import org.junit.Test;

import java.util.Random;

import static org.junit.Assert.*;

public class SimpleExploreExploitImitateTest {


    @Test
    public void noImitation() {

        //works kind of like a very sensitive epsilon-greedy when there is nothing to imitate

        Chooser<Integer,Double,Object> quasiBandit =
                new SimpleExploreExploitImitate(
                        10,
                        .2,
                        0,
                        System.currentTimeMillis()
                );


        Random random = new Random(System.currentTimeMillis());
        // should pick the best option
        for (int i = 0; i < 1000; i++) {
            int arm = quasiBandit.getLastChoice();
            //noiseless
            quasiBandit.updateAndChoose(
                    new SimpleObservation(arm, (double) arm)
            );
        }

        //stop exploring
        ((SimpleExploreExploitImitate) quasiBandit).setExplorationRule(
                (lastObservation, currentChoice, utilityFunction, random1, additionalObservations) -> false);

        //you should be at the best!
        assertEquals(9, (int)quasiBandit.updateAndChoose(null));

        System.out.println(((SimpleExploreExploitImitate) quasiBandit).getState());


    }

    @Test
    public void exploresCorrectly(){

        //if somebody passes on good information, the algorithm will choose it

        SimpleExploreExploitImitate eei =
                new SimpleExploreExploitImitate(
                        1000,
                        0, //no exploration
                        1, //100% imitation chance!
                        System.currentTimeMillis()
                );


        eei.updateAndChoose(
                new SimpleObservation(eei.getLastChoice(), (double) eei.getLastChoice()),
                new SimpleObservation(1000,99999d),
                new SimpleObservation(1,1d),
                new SimpleObservation(2,2d)
        );

        assertEquals(1000,(int)eei.getLastChoice());
        assertEquals(eei.getLastAction(),ExploreExploitImitateAction.IMITATING);




    }

    @Test
    public void ignoreDumbFriends(){

        //if somebody passes on bad information, the algorithm will ignore it

        SimpleExploreExploitImitate eei =
                new SimpleExploreExploitImitate(
                        1000,
                        0, //no exploration
                        1, //100% imitation chance!
                        System.currentTimeMillis()
                );


        Integer originalChoice = eei.getLastChoice();
        eei.updateAndChoose(
                new SimpleObservation(originalChoice, (double) originalChoice),
                new SimpleObservation(-1000,-99999d),
                new SimpleObservation(-1,-1d),
                new SimpleObservation(-2,-2d)
        );

        assertEquals((int)originalChoice,(int) eei.getLastChoice());
        assertEquals(eei.getLastAction(),ExploreExploitImitateAction.EXPLOITING);




    }
}